#!/usr/bin/env bash


usage(){
	echo -e "\n\n"
	echo -e "\t\t\t\t***********************************************"
	echo -e "\t\t\t\t******              Ehecatl              ******"
	echo -e "\t\t\t\t******              TUTORIAL             ******"
	echo -e "\t\t\t\t***********************************************"
	echo -e "\n"
	echo -e "\t\t2 JOIN-COUNTS:"
	echo -e "\t\t--------------"
	echo -e "\t\tConcatenates by columns every column of the Kallisto results"
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p join-counts --work-dir <working directory> -i <input dir> -o <output> --column <int>"
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name."
	echo -e "\t\t--work-dir\tSpecifies the path to working directory. [optional]*"
	echo -e "\t\t-i\t\tSpecifies the directory path where kallisto output files filename is"
	echo -e "\t\t\t\t(abundance.tsv)"
	echo -e "\t\t-o\t\tSpecifies the complete output path and the file name where the"
	echo -e "\t\t\t\tresults will be stored."
	echo -e "\t\t--column-number\tSets the number of the column to be picked up."
	echo -e "\n"
	echo -e "\t\tExample:"
	echo -e "\t\t--------"
	echo -e "\t\t\tehecatl -p join-counts -i home/user/kall-out/fileslist.txt -o home/user/total-counts/tissues.txt --column-number 3" 
	echo -e "\t\tIn this example, it takes the abundance.tsv files from kallisto counting results"
	echo -e "\t\twhich are stored in home/user/kall-out directory and concatenates the counts from column \"--column-number\""
	echo -e "\t\tof each file."
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t3 EDGE-R*:"
	echo -e "\t\t----------"
	echo -e "\n"
	echo -e "\t\t3.1 edgeR-build:"
	echo -e "\t\t\tCreates a R DGE object from edgeR library."
	echo -e "\t\t3.2 edgeR-ctst:"
	echo -e "\t\t\tMakes the contrast analysis."
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p edgeR-build --work-dir <working directory> -i <counts.txt> --command-file <runtable.txt>"
	echo -e "\t\t\tehecatl -p edgeR-ctst --work-dir <working directory> -i <counts.txt> --ctst-pattern <\"c('pattern')\">"
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name."
	echo -e "\t\t--work-dir\tSpecifies the working directory."
	echo -e "\t\t-i\t\tInput file: the counts table file generated by join-counts"
	echo -e "\t\t--command-file\tRunning table information: contains info about library name and treatments"
	echo -e "\t\t--ctst-pattern\tSpecifies the choosen treatments to make contrast analysis among other treatments with edgeR"
	echo -e "\n"
	echo -e "\t\tExample:"
	echo -e "\t\t--------"
	echo -e "\t\t\tehecatl -p edgeR-build --work-dir /to/working/dir/ -i /to/counts/file.txt --command-file /to/runtable/name.txt."
	echo -e "\t\t\tThis instruction will create the DGE object of edgeR"
	echo -e "\t\t\tehecatl -p edgeR-ctst --work-dir /to/working/dir -i /to/counts/file.txt --ctst-pattern \"c(\'tissue1', 'tissue2\')\""
	echo -e "\t\t\tThis instruction will make the contrast analysis with tissue1 and tissue2 among the other tissues of the experiment"
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t4 SYLAMER:"
	echo -e "\t\t---------"
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p sylamer --work-dir <working directory> -i <input> -o <output> --headers <text file> --length <kmer len> --grow <window growing>"
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name."
	echo -e "\t\t--work-dir\tSpecifies the path to working directory."
	echo -e "\t\t-i\t\tFasta sequences file name. (UTRs, Promoters, CDS, etc...)."
	echo -e "\t\t-o\t\tOutput file name."
	echo -e "\t\t--headers\tText file of the ordered gene names. Every gene name is separated by"
	echo -e "\t\t\t\treturn carriage character '\\n'"
	echo -e "\t\t--length\t\tLength of the Kmer to search for."
	echo -e "\t\t--grow\t\tSize of the growning window for each step."
	echo -e "\t\t--opt-param\tSylamer optional parameters. You must write them as is required by"
	echo -e "\t\t\t\tSylamer and inside double quotation."
	echo -e "\t\tExample:"
	echo -e "\t\t--------"
	echo -e "\t\t\tehecatl -p sylamer --work-dir /to/Working/Dir/ -i UTRs.fasta -o /to/Output/Dir/output.syl --headers /to/headers/file.hd --length 7 --grow 300 --opt-params \"--additional parameters\""
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t5 REPLACE-HEADER:"
	echo -e "\t\t-----------------"
	echo -e "\t\tReplaces the headers of a fasta sequences acording to a 2 column relational headers file."
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p replace-header --work-dir <working directory> -i <input> -o <output> --command-file <parentDB.txt>"
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t6 R-MES:"
	echo -e "\t\t-----------------"
	echo -e "\t\tCalculates the reciprocal difference of the composition of miRNA target sites enrichment"
	echo -e "\t\tbetween two genes (paralogues)."
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p r-mes --work-dir <working directory> -i <input>"
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name."
	echo -e "\t\t--work-dir\tSpecifies the working directory."
	echo -e "\t\t-i\t\tInput file containing miRNA target sites enrichment for every paralogues and miRNA."
	echo -e "\t\t\t\tThis file is the output of seed-map -> join-homologs piped programs (*_bymiRNA.smp.sorted)."
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t7 SEED-MAP:"
	echo -e "\t\t-----------------"
	echo -e "\t\tCalculates the miRNA target sites enrichment in total and by miRNA for every gene sequence"
	echo -e "\t\twhich is in the input file."
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p seed-map --work-dir <working directory> -i <input.fasta> --mirna-ome <mirna-list.fasta> -o \"*_total.smp *_bymiRNA.smp\""
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name."
	echo -e "\t\t--work-dir\tSpecifies the working directory."
	echo -e "\t\t-i\t\tInput sequences file."
	echo -e "\t\t-o\t\tSpecifies the output file names for storing the results. first file stores the total miRNA target sites enrichment by gene"
	echo -e "\t\t\t\tthe second file stores the miRNA target sites enrichment by miRNA and for every gene. You should encolse the output filenames with"
	echo -e "\t\t\t\tdouble quotes and should be separated by a space."
	echo -e "\t\t--mirna-ome\tmicro-RNAs sequences fasta file."
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t8 EXTRACT-***:"
	echo -e "\t\t-----------------"
	echo -e "\t\tExtract from genome sequence the UTRs based on the annotation of transcriptome"
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p extract-utr --work-dir <working directory> -i <genome.fasta> --trome <transcriptome.gff3>"
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name (extract-utr, extract-mrna, ...)"
	echo -e "\t\t--work-dir\tSpecifies the working directory."
	echo -e "\t\t-i\t\tInput genome fasta file."
	echo -e "\t\t--trome\t\tFeature annotation gff file for this version of genome."
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t9 JOIN-HOMOLOGS:"
	echo -e "\t\t----------------"
	echo -e "\t\tConcatenates the results of miRNA target sites enirchment of homologs genes. It returns"
	echo -e "\t\ta output file with the name of the input file, but with a .sorted extension"
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p join-homologs --work-dir <working directory> -i <*.smp> --delim <pattern>"
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name."
	echo -e "\t\t--work-dir\tSpecifies the working directory. [optional]*"
	echo -e "\t\t-i\t\tInput file: this file is the output of seed-map program (*.smp)."
	echo -e "\t\t--delim\tThis delimiter is used to separate the gene identifier name."
	echo -e "\t\t\t\tIf there is not one, just specify a blank space ' '."
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t10 EXTRACT-HOMOLOGS:"
	echo -e "\t\t----------------"
	echo -e "\t\tExtract Homologues genes from fasta files: Orthologues and Paralogues."
	echo -e "\t\tThe scrutiny is achieved by sequence header comparison."
	echo -e "\t\tIt takes the first fasta file (Orthologues data set) and compares the header of each sequence"
	echo -e "\t\twith the headers of the paralogues genes of the second fasta file. If a gene of the first fasta file"
	echo -e "\t\thas two homologues genes (paralogues) in the second fasta file, this script takes them and writes them into output file."
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p extract-homologs --work-dir <working directory> -i \"<orthologs.fasta paralogs.fasta>\""
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name."
	echo -e "\t\t--work-dir\tSpecifies the working directory."
	echo -e "\t\t-i\t\tInput file names: those file names must be enclosed with double quotation and separated by a space."
	echo -e "\n"
	echo -e "\t\tExample:"
	echo -e "\t\t--------"
	echo -e "\t\t\tehecatl -p extract-homologs --work-dir /to/working/dir/ -i \"xenopus_tropicalis.fa xenopus_laevis.fa\""
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t11 ANABEL:"
	echo -e "\t\t----------------"
	echo -e "\t\tReads a fasta file of k-mers and returns a fasta file of anagrams of those k-mers."
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p anabel --work-dir <working directory> -i kmers.fasta"
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name."
	echo -e "\t\t--work-dir\tSpecifies the working directory."
	echo -e "\t\t-i\t\tInput fasta file name of the kmers."
	echo -e "\n"
	echo -e "\t\tExample:"
	echo -e "\t\t--------"
	echo -e "\t\t\tehecatl -p anabel --work-dir /to/working/dir/ -i X_tropicalis_miRNA_seed.fasta"
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t12 RDC-GRAPH:"
	echo -e "\t\t----------------"
	echo -e "\t\tPlots *.rdc files (LS*.rdc, LX*.rdc, SX*.rdc). [BOXPLOT & HISTOGRAM]"
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p rdc-graph --work-dir <working directory> -i \"LvS*_bymiRNA.rdc LvX*_bymiRNA.rdc SvX*_bymiRNA.rdc\""
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name."
	echo -e "\t\t--work-dir\tSpecifies the working directory. [optional]*"
	echo -e "\t\t-i\t\tInput rdc files enclosed by double quotation: first file contains X. laevis L Vs S gene comparisions, second file contains"
	echo -e "\t\t\t\tX. laevis L Vs X. tropicalis gene comparisions, and the third file contains X. laevis S Vs X. tropicalis gene comparisions."
	echo -e "\t\t\t\tThese input files are the output of the piped programs seed-map -> join-homologs -> r-mes -> *.rdc"
	echo -e "\n"
	echo -e "\t\tExample:"
	echo -e "\t\t--------"
	echo -e "\t\t\tehecatl -p rdc-graph --work-dir /to/working/dir/ -i \"LS_UTR_bymiRNA.smp.sorted.rdc LX_UTR_bymiRNA.smp.sorted.rdc SX_UTR_bymiRNA.smp.sorted.rdc\""
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t13 CUM-FREQ:"
	echo -e "\t\t----------------"
	echo -e "\t\tPlots cummulative frequency data from *_total.smp"
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p cum-freq --work-dir <working directory> -i \"L_total.smp S_total.smp X_total.smp\""
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name."
	echo -e "\t\t--work-dir\tSpecifies the working directory. [optional]*"
	echo -e "\t\t-i\t\tInput smp files. Contain the miRNA target sites enrichment data for every set of genes (L,S and X)."
	echo -e "\t\t\t\tThose files are the output of the program seed-map."
	echo -e "\n"
	echo -e "\t\tExample:"
	echo -e "\t\t--------"
	echo -e "\t\t\tehecatl -p cum-freq --work-dir /to/working/dir/ -i \"L_UTR_total.smp S_UTR_total.smp X_UTR_total.smp\""
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------
	echo -e "\t\t14 SEED-PLOT:"
	echo -e "\t\t----------------"
	echo -e "\t\tPlots *_total.smp.sorted files"
	echo -e "\n"
	echo -e "\t\tUsage:"
	echo -e "\t\t------"
	echo -e "\t\t\tehecatl -p seed-plot --work-dir <working directory> -i \"LvS*_total.smp.sorted LvX*_total.smp.sorted SvX*_total.smp.sorted\""
	echo -e "\n"
	echo -e "\t\tOptions:"
	echo -e "\t\t--------"
	echo -e "\t\t-p\t\tProgram name."
	echo -e "\t\t--work-dir\tSpecifies the working directory. [optional]*"
	echo -e "\t\t-i\t\tInput rdc files enclosed by double quotation: first file contains X. laevis L Vs S gene comparisions, second file contains"
	echo -e "\t\t\t\tX. laevis L Vs X. tropicalis gene comparisions, and the third file contains X. laevis S Vs X. tropicalis gene comparisions."
	echo -e "\t\t\t\tThese input files are the output of the piped programs seed-map -> join-homologs -> r-mes -> *.rdc"
	echo -e "\n"
	echo -e "\t\tExample:"
	echo -e "\t\t--------"
	echo -e "\t\t\tehecatl -p seed-plot --work-dir /to/working/dir/ -i \"LS_UTR_total.smp.sorted LX_UTR_total.smp.sorted SX_UTR_total.smp.sorted\""
	echo -e "\t\t__END__."
	echo -e "\n\n"
	#--------------------------

}

program_list(){
	clear
	echo -e "\n\n"
	echo -e "\t\t\t\t***********************************************"
	echo -e "\t\t\t\t******              Ehecatl              ******"
	echo -e "\t\t\t\t******            PROGRAM LIST           ******"
	echo -e "\t\t\t\t***********************************************"
	echo -e "\n"
	echo -e "\t\tPROGRAMS:"
	echo -e "\t\t---------"
	echo -e "\n"
	echo -e "\t\t1 KALLISTO\t\t2 JOIN-COUNTS\t\t3 EDGE-R*\t4 SYLAMER\n"	
	echo -e "\t\t5 REPLACE-HEADER\t6 R-MES\t\t\t7 SEED-MAP\t8 EXTRACT-***\n"
	echo -e "\t\t9 JOIN-HOMOLOGS\t\t10 EXTRACT-HOMOLOGS\t11 ANABEL\t12 RDC-GRAPH\n"
	echo -e "\t\t13 CUM-FREQ\t\t14 SEED-PLOT"
	echo -e "\n\n"
}

while getopts "h:p:i:o:-:" opt;
do
	if [ -z $opt ]; then
		echo "$opt is empty"
		usage
		exit 0
	fi
	case $opt in
		h)
			clear
			usage | sed -n -e "/$OPTARG/,/__END__./ p"; exit 0
		;;
		p)
			PROGRAM=$OPTARG
		;;
		i)
			INPUT=$OPTARG
		;;
		o)
			OUTPUT=$OPTARG
		;;
		-)
			case $OPTARG in
				out-dir)
					OUTDIR=${!OPTIND}
					OPTIND=$(( $OPTIND + 1 ))
				;;
				work-dir)
					WORKDIR=${!OPTIND}
					OPTIND=$(( $OPTIND + 1 ))
				;;
				program-list)
					program_list; exit 0
				;;
				length|column-number)
					LEN=${!OPTIND}
					OPTIND=$(( $OPTIND + 1 ))
				;;
				std-dev)
					STD=${!OPTIND}
					OPTIND=$(( $OPTIND + 1 ))
				;;
				bool-single)
					BOOL_SINGLE="TRUE"
				;;
				bool-cluster)
					BOOL_CLUSTER="TRUE"
				;;
				index)
					INDEX=${!OPTIND}
					OPTIND=$(( $OPTIND + 1 ))
				;;
				ctst-pattern|delim)
					CTST_PATTERN=${!OPTIND}
					OPTIND=$(( $OPTIND + 1 ))
				;;
				command-file|mirna-ome|transcriptome)
					COMMAND_FILE=${!OPTIND}
					OPTIND=$(( $OPTIND + 1 ))
				;;
				headers)
					HEADERS=${!OPTIND}
					OPTIND=$(( $OPTIND + 1 ))
				;;
				grow)
					GROW=${!OPTIND}
					OPTIND=$(( $OPTIND + 1 ))
				;;
				opt-param)
					OPTIONAL_PARAMETERS=${!OPTIND}
					OPTIND=$(( $OPTIND + 1 ))
				;;
				*)
					usage;
					echo "Bad double hyphen argument";
					exit 0
				;;
			esac
		;;
		*)
			usage;
			echo "Bad single hyphen argument!";
			exit 0
		;;
	esac
done

if [ -z $WORKDIR ]; then
	WORKDIR=$(pwd)
fi

case $PROGRAM in
	kallisto)
		if [ "$BOOL_CLUSTER" == "TRUE" ]; then
			if [ "$BOOL_SINGLE" ]; then
				echo 'cd $WORKDIR; module load kallisto/0.43.0; for file in ${INPUT}*{.fastq.gz, .fq.gz, .fq}; do output=$(basename $file "/") --single -i $INDEX -o $OUTDIR/$OUTPUT -l $LEN -s $STD $INPUT' | qsub -N kall_${INPUT} -l nodes=1:ppn=8,mem=20gb,vmem=20gb -V -q default
			fi
		else
			if [ "$BOOL_SINGLE" ]; then
				echo 'cd $WORKDIR; module load kallisto/0.43.0; kallisto --single -i $INDEX -o $OUTDIR/$OUTPUT -l $LEN -s $STD $INPUT' | qsub -N kall_${INPUT} -l nodes=1:ppn=8,mem=20gb,vmem=20gb -V -q default
			else
				echo  'cd $WORKDIR; module load kallisto/0.43.0; kallisto -i $INDEX -o $OUTDIR/$OUTPUT $INPUT' | qsub -N Kall_${INPUT} -l nodes=1:ppn=8,mem=20gb,vmem=20gb -V -q default
			fi
		fi
	;;
	join-counts)
		DIR_joinCounts=$(which joinCounts)
		if [ -z $DIR_joinCounts ]; then
			echo -e "joinCounts' is not installed!"
			exit 0
		else
			if [ -z $WORKDIR ]; then
				WORKDIR=$(pwd)
			fi
			echo "
			cd $WORKDIR
			joinCounts $INPUT $OUTPUT $LEN" | qsub -N QSUB_$(basename $INPUT '/') -l nodes=1:ppn=1,mem=5gb,vmem=5gb -V -q default
		fi
	;;
	join-homologs)
		DIR_joinhomologs=$(which joinHomologs)
		if [ -z $DIR_joinhomologs ]; then
			echo "JoinHomologs is not installed!"
			exit 0
		else
			if [ -z $WORKDIR ]; then
				WORKDIR=$(pwd)
			fi
			if [ -z $BOOL_SINGLE ]; then
				echo "
				cd $WORKDIR
				joinHomologs $INPUT $CTST_PATTERN" | qsub -N QSUB_$(basename $INPUT '/') -l nodes=1:ppn=1,mem=5gb,vmem=5gb -V -q default
			else
				cd $WORKDIR
				nohup joinHomologs $INPUT $CTST_PATTERN > $(basename $INPUT '/').nohup.log 
			fi
		fi
	;;
	extract-homologs)
		if [ -z $WORKDIR ]; then
			WORKDIR=$(pwd)
		fi
		python -c "from sys import argv, path; \
		path.append('/home/montalvo/scripts/ban-4.0/utils/'); \
		from Utils import extract_homologs; \
		files = argv[1].split(); \
		extract_homologs(files[0], files[1])" $INPUT | qsub -N QSUB_$(basename $INPUT '/') -l nodes=1:ppn=1,mem=5gb,vmem=5gb -V -q default
	;;
	edgeR-build)
		DIR_edgeR_build=$(which edgeR-build)
		if [ -z $DIR_edgeR_build ]; then
			echo "edgeR-build is not installed!"
			exit 0
		fi
		if [ -z $WORKDIR ]; then
			WORKDIR=$(pwd)
		fi
		echo "
		cd $WORKDIR
		module load R/3.3.0
		edgeR-build $INPUT $COMMAND_FILE" | qsub -N $INPUT -l nodes=1:ppn=8,mem=20gb,vmem=20gb -V -q default
	;;
	edgeR-ctst)
		DIR_edgeR_ctst=$(which edgeR-ctst)
		if [ -z $DIR_edgeR_ctst ]; then
			echo "edgeR-ctst is not intalled!"
			exit 0
		fi
		if [ -z $WORKDIR ]; then
			WORKDIR=$(pwd)
		fi
		echo "
		cd $WORKDIR
		module load R/3.3.0
		edgeR-ctst $INPUT \"$CTST_PATTERN\"" | qsub -N $INPUT -l nodes=1:ppn=8,mem=20gb,vmem=20gb -V -q default
	;;
	sylamer)
		DIR_sylamer=$(which sylamer)
		if [ -z $DIR_sylamer ]; then
			echo "sylamer is not installed!"
			exit 0
		fi
		if [ -z $WORKDIR ]; then
			WORKDIR=$(pwd)
		fi
		if [ -z $OPTIONAL_PARAMETERS ]; then
			echo "
			cd $WORKDIR
			pwd
			echo ${WORKDIR}${OUTPUT}
			sylamer -fasta $INPUT -o $OUTPUT -universe $HEADERS -k $LEN -grow $GROW" | qsub -N $(basename $INPUT '/') -l nodes=1:ppn=8,mem=20gb,vmem=20gb -V -q default
		else
			echo "
			cd $WORKDIR
			sylamer -fasta $INPUT -o $OUTPUT -universe $HEADERS -k $LEN -grow $GROW $OPTIONAL_PARAMETERS" | qsub -N $(basename $INPUT '/') -l nodes=1:ppn=8,mem=20gb,vmem=20gb -V -q default
		fi
	;;
	replace-header)
		python -c "from sys import argv, path; \
		path.append('/home/montalvo/scripts/ban-4.0/utils/'); \
		from Utils import  PDStruct, replace_header; \
		PDS = PDStruct(argv[2]); \
		replace_header(argv[1], argv[3], PDS); \
		print \"Headers from %s were reformated\" % argv[1]" $INPUT $COMMAND_FILE $OUTPUT
	;;
	r-mes)
		DIR_reciprocalMes=`which reciprocalMes`
		if [ -z $DIR_reciprocalMes ]; then
			echo "resiprocalMes is not installed!"
			exit 0
		else
			if [ -z $BOOL_SINGLE ]; then
				echo "
				cd $WORKDIR
				reciprocalMes $INPUT" | qsub -N QSUB_$(basename $INPUT '/') -l nodes=1:ppn=8,mem=20gb,vmem=20gb -V -q default
			else
				cd $WORKDIR
				nohup reciprocalMes $INPUT > $(basename $INPUT '/').nohup.log &
			fi
		fi
	;;
	rdc-graph)
		DIR_rdcgraph=$(which rdc_graph)
		if [ -z $DIR_rdcgraph ]; then
			echo -e "rdc_graph is not installed!"
		else
			if [ -z $WORKDIR ]; then
				WORKDIR=$(pwd)
			fi
			if [ -z $BOOL_SINGLE ]; then
				askfornode
				cd $WORKDIR
				module load R/3.3.0
				rdc_graph $INPUT
			else
				cd $WORKDIR
				nohup rdc_graph $INPUT > rdc_graph.nohup.log &
			fi
		fi
	;;
	cum-freq)
		DIR_cum_freq=$(which cum_freq)
		if [ -z $DIR_cum_freq ]; then
			echo "cum_freq is not installed!"
			exit 0
		else
			if [ -z $BOOL_SINGLE ]; then
				askfornode
				cd $WORKDIR
				module load R/3.3.0
				cum_freq $INPUT
			else
				cd $WORKDIR
				nohup cum_freq $INPUT > cum_freq.nohup.log &
			fi
		fi
	;;
	seed-plot)
		DIR_seed_plot=$(which seed_plot)
		if [ -z $DIR_seed_plot ]; then
			echo "seed_plot is not installed!"
			exit 0
		else
			if [ -z $BOOL_SINGLE ]; then
				askfornode
				cd $WORKDIR
				module load R/3.3.0
				seed_plot $INPUT
			else
				cd $WORKDIR
				seed_plot $INPUT
			fi
		fi
	;;
	seed-map)
		DIR_seedmap=`which seedMap`
		if [ -z $DIR_seedmap ]; then
			echo "Seed-Map is not intalled!"
			exit 1
		else
			if [ -z $BOOL_SINGLE ]; then
				echo "
				cd $WORKDIR
				seedMap $INPUT $COMMAND_FILE $OUTPUT" | qsub -N QSUB_${INPUT} -l nodes=1:ppn=8,mem=20gb,vmem=20gb -V -q default
			else
				cd $WORKDIR
				nohup seedMap $INPUT $COMMAND_FILE $OUTPUT > ${INPUT}.nohup.log &
			fi
		fi
	;;
	anabel)
		DIR_anabel=$(which anabel)
		if [ -z $DIR_anabel ]; then
			echo "anabel is not installed!"
			exit 1
		else
			echo "
			cd $WORKDIR
			anabel $INPUT" | qsub -N QSUB_$(basename $INPUT '/') -l nodes=1:ppn=8,mem=5gb,vmem=5gb -V -q default
		fi
	;;
	extract-utr)
		DIR_extractutr=`which extractUTR`
		if [ -z $DIR_extractutr ]; then
			echo "ExtractUTRs is not intalled!"
			exit 1
		else
			if [ -z $BOOL_SINGLE ]; then
				echo "
				module load R/3.3.0
				module load bedtools2/2.25.0
				cd $WORKDIR
				extractUTR $INPUT $COMMAND_FILE" | qsub -N QSUB_$(basename $INPUT '/') -l nodes=1:ppn=1,mem=20gb,vmem=20gb -V -q default
			else
				module load R/3.3.0
				module load bedtools2/2.25.0
				cd $WORKDIR
				extractUTR $INPUT $COMMAND_FILE
			fi
		fi
	;;
	extract-mrna)
		DIR_extractmrna=$(which extractmRNA)
		if [ -z $DIR_extractmrna ]; then
			echo "extractmRNA is not installed!"
			exit 1
		else
			if [ -z $BOOL_SINGLE ]; then
				echo "
				module load R/3.3.0
				module load bedtools2/2.25.0
				cd $WORKDIR
				extractmRNA $INPUT $COMMAND_FILE" | qsub -N QSUB_$(basename $INPUT '/') -l nodes=1:ppn=1,mem=20gb,vmem=20gb -V -q default
			else
				module load R/3.3.0
				module load bedtools2/2.25.0
				cd $WORKDIR
				extractmRNA $INPUT $COMMAND_FILE
			fi
		fi
	;;
	*)
		clear
		program_list
		echo -e "\n"
		echo "Bad program name!"
		echo "Get program help: ehecatl -h PROGRAM-NAME"
	;;
esac
